{"version":3,"sources":["components/LandingPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LandingPage","className","Image","src","as","href","target","fluid","to","download","Icon","name","size","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAOaA,G,OAAkB,WAC7B,OACE,yBAAKC,UAAU,OACb,6BAASA,UAAU,+CACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,iDACf,yBAAKA,UAAU,gCACb,wBAAIA,UAAU,0BAAd,gBAEF,yBAAKA,UAAU,kDAEjB,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,gDACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,qBAAf,YACA,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,yBAAf,YACA,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,mBACb,kBAACC,EAAA,EAAD,CACEC,IAAI,mBACJC,GAAG,IACHC,KAAK,yBACLC,OAAO,SACPC,OAAK,IAEP,yBAAKN,UAAU,wBAAf,qBAIF,yBAAKA,UAAU,mBACb,kBAACC,EAAA,EAAD,CACEC,IAAI,wBACJC,GAAG,IACHC,KAAK,gCACLC,OAAO,SACPC,OAAK,IAEP,yBAAKN,UAAU,wBAAf,qBAQV,yBAAKA,UAAU,gDACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,qBAAf,UACA,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,yBAAf,UACA,yBAAKA,UAAU,2BACb,kBAAC,IAAD,CACEO,GAAG,yBACHF,OAAO,SACPG,UAAQ,EACRR,UAAU,iBAEV,6BACE,kBAACS,EAAA,EAAD,CAAMC,KAAK,WAAWC,KAAK,UAE7B,yBAAKX,UAAU,sBAAf,wBAQV,yBAAKA,UAAU,gDACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,qBAAf,SACA,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,yBAAf,YACA,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,mBACb,kBAACC,EAAA,EAAD,CACEC,IAAI,uBACJC,GAAG,IACHC,KAAK,2CACLC,OAAO,SACPC,OAAK,IAEP,yBAAKN,UAAU,wBAAf,aAIF,yBAAKA,UAAU,mBACb,kBAACC,EAAA,EAAD,CACEC,IAAI,yBACJC,GAAG,IACHC,KAAK,6BACLC,OAAO,SACPC,OAAK,IAEP,yBAAKN,UAAU,wBAAf,uBCxFTY,MAVf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWhB,OCErBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ea5a14d6.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport \"./LandingPage.scss\";\nimport { Link } from \"react-router-dom\";\nimport { Icon, Image } from \"semantic-ui-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nexport const LandingPage: FC = () => {\n  return (\n    <div className=\"App\">\n      <section className=\"hero has-background-white-ter is-fullheight\">\n        <div className=\"hero-body\">\n          <div className=\"tile is-ancestor is-vertical\">\n            <div className=\"tile is-parent\">\n              <div className=\"tile is-4 is-danger is-child front-page-tile\"></div>\n              <div className=\"tile is-4 is-danger is-child\">\n                <h1 className=\"title has-text-primary\">samir joshi</h1>\n              </div>\n              <div className=\"tile is-4 is-danger is-child front-page-tile\"></div>\n            </div>\n            <div className=\"tile is-parent\">\n              <div className=\"tile is-4 is-danger is-child front-page-tile\">\n                <div className=\"box tile-card\">\n                  <div className=\"tile-card-default\">Projects</div>\n                  <div className=\"tile-card-hover\">\n                    <div className=\"tile-card-hover-title\">Projects</div>\n                    <div className=\"tile-card-hover-content\">\n                      <div className='image-link-icon'>\n                        <Image\n                          src='hockey_emoji.png'\n                          as='a'\n                          href='https://samirjoshi.dev'\n                          target='_blank'\n                          fluid\n                        />\n                        <div className='image-link-icon-text'>\n                          Hockey Dashboard\n                        </div>\n                      </div>\n                      <div className='image-link-icon'>\n                        <Image\n                          src='/GitHub-Mark-64px.png'\n                          as='a'\n                          href='https://github.com/SamirJoshi'\n                          target='_blank'\n                          fluid\n                        />\n                        <div className='image-link-icon-text'>\n                          All projects\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"tile is-4 is-danger is-child front-page-tile\">\n                <div className=\"box tile-card\">\n                  <div className=\"tile-card-default\">Resume</div>\n                  <div className=\"tile-card-hover\">\n                    <div className=\"tile-card-hover-title\">Resume</div>\n                    <div className=\"tile-card-hover-content\">\n                      <Link\n                        to=\"/Twitter_Logo_Blue.png\"\n                        target=\"_blank\"\n                        download\n                        className=\"download-link\"\n                      >\n                        <div>\n                          <Icon name=\"download\" size=\"huge\" />\n                        </div>\n                        <div className='download-link-text'>\n                          Download resume\n                        </div>\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"tile is-4 is-danger is-child front-page-tile\">\n                <div className=\"box tile-card\">\n                  <div className=\"tile-card-default\">About</div>\n                  <div className=\"tile-card-hover\">\n                    <div className=\"tile-card-hover-title\">About Me</div>\n                    <div className=\"tile-card-hover-content\">\n                      <div className='image-link-icon'>\n                        <Image\n                          src='/In-Black-66px-R.png'\n                          as='a'\n                          href='https://www.linkedin.com/in/samirjoshi1/'\n                          target='_blank'\n                          fluid\n                        />\n                        <div className='image-link-icon-text'>\n                          LinkedIn\n                        </div>\n                      </div>\n                      <div className='image-link-icon'>\n                        <Image\n                          src='/Twitter_Logo_Blue.png'\n                          as='a'\n                          href='https://twitter.com/itmesj'\n                          target='_blank'\n                          fluid\n                        />\n                        <div className='image-link-icon-text'>\n                          Twitter\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport './App.scss'\nimport { LandingPage } from './components/LandingPage'\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact component={LandingPage} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}